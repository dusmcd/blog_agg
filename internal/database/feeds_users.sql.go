// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: feeds_users.sql

package database

import (
	"context"
	"database/sql"
)

const followFeed = `-- name: FollowFeed :one
INSERT INTO feeds_users (id, created_at, updated_at, feed_id, user_id)
VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, feed_id, user_id
`

type FollowFeedParams struct {
	ID        string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	FeedID    string
	UserID    string
}

func (q *Queries) FollowFeed(ctx context.Context, arg FollowFeedParams) (FeedsUser, error) {
	row := q.db.QueryRowContext(ctx, followFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FeedID,
		arg.UserID,
	)
	var i FeedsUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.UserID,
	)
	return i, err
}

const getFeedsFollowed = `-- name: GetFeedsFollowed :many
SELECT feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.user_id FROM feeds
INNER JOIN feeds_users ON feeds_users.feed_id = feeds.id
WHERE feeds_users.user_id = $1
`

func (q *Queries) GetFeedsFollowed(ctx context.Context, userID string) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsFollowed, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeed = `-- name: UnfollowFeed :exec
DELETE FROM feeds_users
WHERE id = $1
`

func (q *Queries) UnfollowFeed(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, unfollowFeed, id)
	return err
}
